USER:
Is there something wrong with the following code:
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

typedef struct E {
    struct E* n;
    float v;
} E;

typedef struct {
    E* s;
} L;

L new() {
    L l = { 0 };
    return l;
}
L from(float* a, int c) {
    L l;
    if(c < 1) {
        return l;
    }
    E* cur = malloc(sizeof(E));
    assert(cur);
    l.s = cur;
    l.s->v = a[0];
    for(int i = 1; i < c; i++) {
        E* n = calloc(1, sizeof(E));
        assert(n);
        n->v = a[i];
        cur->n = n;
        cur = n;
    }
    return l;
}
void put(L* list, float v) {
    E* h = malloc(sizeof(E));
    assert(h);
    h->v = v;
    E* s = list->s;
    list->s = h;
    h->n = s;
}
E* add_far(L* l, float v) {
    if(!l->s) {
        put(l,v);
        return l->s;
    }
    E* t = calloc(1, sizeof(E));
    assert(t);
    E* cur = l->s;
    while(cur->n) {
        cur = cur->n;
    }
    cur->n = t;
    return t;
}
E* get(L* l, float v) {
    E* cur = l->s;
    while(cur) {
        if(cur->v == v) {
            return cur;
        }
        cur = cur->n;
    }
    return NULL;
}
typedef bool(RemF)(E* e, void* d);
size_t rem(L* l, RemF f, void* d) {
    int rem = 0;
    if(!l->s) {
        return;
    }
    E tmp = { 0 };
    tmp.n = l->s;
    E* p = &tmp;
    E* cur = p->n;
    while(cur) {
        if(f(cur, d)) {
            rem++;
            p->n = cur->n;
            E* temp = cur;
            cur = cur->n;
            free(temp);
            continue;
        }
        cur = cur->n;
    }
    return rem;
}
int len(L* l) {
    int c = 0;
    E* cur = l->s;
    while(cur) {
        c++;
        cur = cur->n;
    }
    return c;
}
void end(L* l) {
    E* cur = l->s;
    while(cur) {
        E* tmp = cur;
        cur = cur->n;
        free(tmp);
    }
    l->s = NULL;
}
void out(L* l) {
    printf("List");
    E* cur = l->s;
    while(cur) {
        printf("->%.3f", cur->v);
        cur = cur->n;
    }
    printf("\n");
    return;
}

AI:
Your code appears to have some potential issues, both functional and stylistic. Let's go through the main points:

1. Uninitialized Local Variables
In the function from, the local variable L l is declared without initialization:
c
Copy
Edit
L l;
If c < 1, the function immediately returns l, which contains garbage values since it hasn't been initialized. This causes undefined behavior.
Fix: Initialize l properly:
c
Copy
Edit
L l = { 0 };
2. Returning from rem Without a Value
In the function rem, the following return statement is incomplete:
c
Copy
Edit
if (!l->s) {
    return;
}
This is invalid because rem has a return type of size_t. If the list is empty, you should return 0 instead:
c
Copy
Edit
if (!l->s) {
    return 0;
}
3. Usage of assert
assert is a useful debugging tool but not ideal for production code because it terminates the program if the condition is false. Consider handling memory allocation failures gracefully:
c
Copy
Edit
E* cur = malloc(sizeof(E));
if (!cur) {
    perror("Failed to allocate memory");
    exit(EXIT_FAILURE);
}
4. Leaking Memory in add_far
In add_far, if calloc for t fails, memory allocated for the previous nodes of the list will remain allocated. Consider checking for allocation failure and handling it appropriately.
5. Misleading Function Name: rem
The name rem is short and unclear. A more descriptive name like remove_if would improve readability.
6. Logical Error in rem
In rem, the code updates the temporary node (p->n) instead of directly manipulating the list. This is fine, but it relies on an auxiliary dummy node tmp. If tmp is not used consistently, it can lead to errors in edge cases, such as when the first element is removed.
The dummy node approach is fine but requires careful attention to detail.
7. Style and Readability
There are multiple points where readability could be improved. For example:
Use consistent naming conventions.
Use whitespace and comments to explain complex operations.
Replace magic numbers (like 0 when initializing structs) with symbolic constants or initializers.
Updated Code for Critical Issues
Here is the corrected and cleaned-up version of the critical sections:

c
Copy
Edit
L from(float* a, int c) {
    L l = { 0 };
    if (c < 1) {
        return l;
    }
    E* cur = malloc(sizeof(E));
    if (!cur) {
        perror("Failed to allocate memory");
        exit(EXIT_FAILURE);
    }
    l.s = cur;
    l.s->v = a[0];
    for (int i = 1; i < c; i++) {
        E* n = calloc(1, sizeof(E));
        if (!n) {
            perror("Failed to allocate memory");
            exit(EXIT_FAILURE);
        }
        n->v = a[i];
        cur->n = n;
        cur = n;
    }
    return l;
}

size_t rem(L* l, RemF f, void* d) {
    size_t rem = 0;
    if (!l->s) {
        return 0;
    }
    E tmp = { .n = l->s };
    E* p = &tmp;
    E* cur = p->n;
    while (cur) {
        if (f(cur, d)) {
            rem++;
            p->n = cur->n;
            free(cur);
            cur = p->n;
        } else {
            p = cur;
            cur = cur->n;
        }
    }
    l->s = tmp.n;
    return rem;
}
Let me know if you'd like a complete rewrite or further clarification!